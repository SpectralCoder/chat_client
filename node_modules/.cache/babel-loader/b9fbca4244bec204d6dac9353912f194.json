{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { SERIALIZE } from './rehydrate';\nexport class Devtools {\n  constructor(name) {\n    this.safeClassNames = new Set();\n    this.unsafeClassNames = new Set();\n    this.circularReferenceCache = [];\n    this.buffer = [];\n    this.serializer = Promise.resolve();\n    this.isConnected = false;\n    this.doReconnect = false;\n    this.hasWarnedReconnect = false;\n    this.reconnectInterval = 10000;\n\n    this.connect = (host, onMessage) => {\n      host = host || 'localhost:3031';\n      this.ws = new WebSocket(`ws://${host}?name=${this.name}`);\n\n      this.ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n\n        if (data.appName !== this.name) {\n          return;\n        }\n\n        onMessage(data);\n      };\n\n      this.ws.onopen = () => {\n        this.isConnected = true;\n        this.flushBuffer();\n      };\n\n      this.ws.onerror = () => {\n        console.error(`OVERMIND DEVTOOLS: Not able to connect. You are trying to connect to \"${host}\", but there was no devtool there. Try the following:\n        \n          - Make sure you are running the latest version of the devtools, using \"npx overmind-devtools@latest\" or install latest extension for VSCode\n          - Close the current tab and open a new one\n          - Make sure the correct port is configured in the devtools\n        `);\n      };\n\n      this.ws.onclose = () => {\n        this.isConnected = false;\n\n        if (this.doReconnect && !this.hasWarnedReconnect) {\n          console.warn('Debugger application is not running on selected port... will reconnect automatically behind the scenes');\n          this.hasWarnedReconnect = true;\n        }\n\n        if (this.doReconnect) {\n          this.reconnect(host, onMessage);\n        }\n      };\n    };\n\n    this.sendMessage = payload => {\n      if (!this.isConnected) {\n        this.buffer.push(payload);\n        return;\n      }\n\n      this.ws.send(`{\"appName\":\"${this.name}\",\"message\":${payload}}`);\n    };\n\n    this.flushBuffer = () => __awaiter(this, void 0, void 0, function* () {\n      this.buffer.forEach(payload => {\n        this.sendMessage(payload);\n      });\n      this.buffer.length = 0;\n    });\n\n    this.name = typeof location !== 'undefined' && location.search.includes('OVERMIND_DEVTOOL') ? name + ' (Overmind Devtool)' : name;\n  }\n\n  reconnect(host, onMessage) {\n    setTimeout(() => this.connect(host, onMessage), this.reconnectInterval);\n  }\n\n  send(message) {\n    const safeClassNames = this.safeClassNames;\n    const unsafeClassNames = this.unsafeClassNames;\n    const circularReferenceCache = this.circularReferenceCache;\n    this.sendMessage(JSON.stringify(message, function (_, value) {\n      if (typeof value === 'function') {\n        return '[Function]';\n      }\n\n      if (this.__CLASS__) {\n        return value;\n      }\n\n      if (value && value[SERIALIZE]) {\n        return {\n          __CLASS__: true,\n          name: value.constructor.name,\n          value\n        };\n      }\n\n      if (typeof value === 'object' && value !== null && !Array.isArray(value) && value.constructor && value.constructor.name !== 'Object') {\n        if (circularReferenceCache.includes(value)) {\n          return `[CIRCULAR REFERENCE: ${value.constructor.name}]`;\n        }\n\n        circularReferenceCache.push(value);\n\n        if (!safeClassNames.has(value.constructor.name) && !unsafeClassNames.has(value.constructor.name)) {\n          try {\n            JSON.stringify(value);\n            safeClassNames.add(value.constructor.name);\n          } catch (_a) {\n            unsafeClassNames.add(value.constructor.name);\n          }\n        }\n\n        if (safeClassNames.has(value.constructor.name)) {\n          return {\n            __CLASS__: true,\n            name: value.constructor.name,\n            value\n          };\n        } else {\n          return `[${value.constructor.name || 'NOT SERIALIZABLE'}]`;\n        }\n      }\n\n      return value;\n    }));\n    circularReferenceCache.length = 0;\n  }\n\n}","map":{"version":3,"sources":["../src/Devtools.ts"],"names":[],"mappings":"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","sourcesContent":["import { SERIALIZE } from './rehydrate'\n\nexport type Message = {\n  type: string\n  data?: object\n}\n\nexport type DevtoolsMessage = {\n  type: string\n  appName: string\n  data: any\n}\n\nexport class Devtools {\n  private safeClassNames: Set<string> = new Set()\n  private unsafeClassNames: Set<string> = new Set()\n  private circularReferenceCache: any[] = []\n  private buffer: string[] = []\n  private serializer = Promise.resolve()\n  private ws: WebSocket\n  private isConnected: boolean = false\n  private doReconnect: boolean = false\n  private hasWarnedReconnect: boolean = false\n  private reconnectInterval: number = 10000\n  private name: string\n  constructor(name: string) {\n    this.name = typeof location !== 'undefined' && location.search.includes('OVERMIND_DEVTOOL') ? name + ' (Overmind Devtool)' : name\n  }\n  connect = (host: string, onMessage: (message: Message) => void) => {\n    host = host || 'localhost:3031'\n\n    this.ws = new WebSocket(`ws://${host}?name=${this.name}`)\n    this.ws.onmessage = (event) => {\n      const data = JSON.parse(event.data)\n\n      if (data.appName !== this.name) {\n        return\n      }\n      onMessage(data)\n    }\n    this.ws.onopen = () => {\n      this.isConnected = true\n      this.flushBuffer()\n    }\n    this.ws.onerror = () => {\n      console.error(\n        `OVERMIND DEVTOOLS: Not able to connect. You are trying to connect to \"${host}\", but there was no devtool there. Try the following:\n        \n          - Make sure you are running the latest version of the devtools, using \"npx overmind-devtools@latest\" or install latest extension for VSCode\n          - Close the current tab and open a new one\n          - Make sure the correct port is configured in the devtools\n        `\n      )\n    }\n    this.ws.onclose = () => {\n      this.isConnected = false\n\n      if (this.doReconnect && !this.hasWarnedReconnect) {\n        console.warn(\n          'Debugger application is not running on selected port... will reconnect automatically behind the scenes'\n        )\n        this.hasWarnedReconnect = true\n      }\n\n      if (this.doReconnect) {\n        this.reconnect(host, onMessage)\n      }\n    }\n  }\n  private reconnect(host, onMessage) {\n    setTimeout(\n      () =>\n        this.connect(\n          host,\n          onMessage\n        ),\n      this.reconnectInterval\n    )\n  }\n  send(message: Message) {\n    const safeClassNames = this.safeClassNames\n    const unsafeClassNames = this.unsafeClassNames\n    const circularReferenceCache = this.circularReferenceCache\n\n    this.sendMessage(JSON.stringify(\n      message,\n      function (_, value) {\n        if (typeof value === 'function') {\n          return '[Function]'\n        }\n\n        if (this.__CLASS__) {\n          return value\n        }\n\n        if (value && value[SERIALIZE]) {\n          return {\n            __CLASS__: true,\n            name: value.constructor.name,\n            value   \n          }\n        }\n\n        if (\n          typeof value === 'object' &&\n          value !== null &&\n          !Array.isArray(value) &&\n          value.constructor &&\n          value.constructor.name !== 'Object'\n        ) {\n          if (circularReferenceCache.includes(value)) {\n            return `[CIRCULAR REFERENCE: ${value.constructor.name}]`\n          }\n\n          circularReferenceCache.push(value)\n\n          if (!safeClassNames.has(value.constructor.name) && !unsafeClassNames.has(value.constructor.name)) {\n            try {\n              JSON.stringify(value)\n              safeClassNames.add(value.constructor.name)\n            } catch {\n              unsafeClassNames.add(value.constructor.name)\n            }\n          }\n          \n          if (safeClassNames.has(value.constructor.name)) {\n            return {\n              __CLASS__: true,\n              name: value.constructor.name,\n              value\n            }\n          } else {\n            return `[${value.constructor.name || 'NOT SERIALIZABLE'}]`\n          }\n        }\n\n        return value\n      }\n    ))\n    circularReferenceCache.length = 0\n  }\n\n  private sendMessage = (payload: string) => {\n    if (!this.isConnected) {\n      this.buffer.push(payload)\n      return\n    }\n    this.ws.send(`{\"appName\":\"${this.name}\",\"message\":${payload}}`)\n  }\n\n  private flushBuffer = async () => {\n    this.buffer.forEach((payload) => {\n      this.sendMessage(payload)\n    })\n    this.buffer.length = 0\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}