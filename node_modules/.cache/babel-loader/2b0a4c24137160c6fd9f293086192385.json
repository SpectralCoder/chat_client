{"ast":null,"code":"import 'proxy-state-tree';\nimport { unstable_scheduleCallback, unstable_getCurrentPriorityLevel, unstable_cancelCallback } from 'scheduler';\nimport { EventType, MODE_SSR } from 'overmind';\nimport * as react from 'react';\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst isNode = !IS_TEST && process && process.title && process.title.includes('node');\n\nfunction getFiberType(component) {\n  if (component.type) {\n    // React.memo\n    return getFiberType(component.type);\n  } // React.forwardRef\n\n\n  return component.render || component;\n} // Inspired from https://github.com/facebook/react/blob/master/packages/react-devtools-shared/src/backend/renderer.js\n\n\nfunction getDisplayName(component) {\n  const type = getFiberType(component);\n  return type.displayName || type.name || 'Anonymous';\n}\n\nfunction throwMissingContextError() {\n  throw new Error('The Overmind hook could not find an Overmind instance on the context of React. Please make sure you use the Provider component at the top of your application and expose the Overmind instance there. Please read more in the React guide on the website');\n}\n\nconst context = react.createContext({});\nlet nextComponentId = 0;\nexport const Provider = context.Provider;\n\nfunction useForceRerender() {\n  const [{\n    flushId\n  }, setTick] = react.useState({\n    tick: 0,\n    flushId: 0\n  });\n  const forceRerender = react.useCallback(flushId => {\n    setTick(current => Object.assign(Object.assign({}, current), {\n      tick: current.tick + 1,\n      flushId: flushId || current.flushId\n    }));\n  }, []);\n  return {\n    flushId,\n    forceRerender\n  };\n}\n\nlet currentComponentInstanceId = 0;\nconst {\n  ReactCurrentOwner\n} = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nconst useCurrentComponent = () => {\n  return ReactCurrentOwner && ReactCurrentOwner.current && ReactCurrentOwner.current.elementType ? ReactCurrentOwner.current.elementType : {};\n};\n\nconst useState = () => {\n  const overmind = react.useContext(context);\n\n  if (!overmind.mode) {\n    throwMissingContextError();\n  }\n\n  if (isNode || overmind.mode.mode === MODE_SSR) {\n    return overmind.state;\n  }\n\n  const trackingRef = react.useRef(null);\n  const {\n    flushId,\n    forceRerender\n  } = useForceRerender();\n\n  if (!trackingRef.current) {\n    trackingRef.current = {\n      tree: overmind.proxyStateTree.getTrackStateTree(),\n      hasUpdatedBeforeCommit: false,\n      stopTrackingTask: unstable_scheduleCallback(unstable_getCurrentPriorityLevel(), () => {\n        trackingRef.current.tree.stopTracking();\n      })\n    };\n  }\n\n  if (IS_PRODUCTION) {\n    react.useLayoutEffect(() => {\n      trackingRef.current.mounted = true;\n\n      if (trackingRef.current.hasUpdatedBeforeCommit) {\n        forceRerender();\n      }\n\n      return () => {\n        ;\n        overmind.proxyStateTree.disposeTree(trackingRef.current.tree);\n      };\n    }, []);\n    react.useLayoutEffect(() => {\n      if (trackingRef.current.stopTrackingTask) {\n        unstable_cancelCallback(trackingRef.current.stopTrackingTask);\n        trackingRef.current.stopTrackingTask = null;\n      }\n\n      trackingRef.current.tree.stopTracking();\n    });\n    trackingRef.current.tree.track(() => {\n      if (trackingRef.current.mounted) {\n        forceRerender();\n      } else {\n        trackingRef.current.hasUpdatedBeforeCommit = true;\n      }\n    });\n  } else {\n    const component = useCurrentComponent();\n    const name = getDisplayName(component);\n    component.__componentId = typeof component.__componentId === 'undefined' ? nextComponentId++ : component.__componentId;\n    const {\n      current: componentInstanceId\n    } = react.useRef(currentComponentInstanceId++);\n    react.useLayoutEffect(() => {\n      trackingRef.current.mounted = true;\n      overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {\n        componentId: component.__componentId,\n        componentInstanceId,\n        name,\n        paths: Array.from(trackingRef.current.tree.pathDependencies)\n      });\n\n      if (trackingRef.current.hasUpdatedBeforeCommit) {\n        forceRerender();\n      }\n\n      return () => {\n        ;\n        overmind.proxyStateTree.disposeTree(trackingRef.current.tree);\n        overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {\n          componentId: component.__componentId,\n          componentInstanceId,\n          name\n        });\n      };\n    }, []);\n    react.useLayoutEffect(() => {\n      if (trackingRef.current.stopTrackingTask) {\n        unstable_cancelCallback(trackingRef.current.stopTrackingTask);\n        trackingRef.current.stopTrackingTask = null;\n      }\n\n      trackingRef.current.tree.stopTracking();\n      overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {\n        componentId: component.__componentId,\n        componentInstanceId,\n        name,\n        flushId,\n        paths: Array.from(trackingRef.current.tree.pathDependencies)\n      });\n    });\n    trackingRef.current.tree.track(() => {\n      if (trackingRef.current.mounted) {\n        forceRerender();\n      } else {\n        trackingRef.current.hasUpdatedBeforeCommit = true;\n      }\n    });\n  }\n\n  return trackingRef.current.tree.state;\n};\n\nconst useActions = () => {\n  const overmind = react.useContext(context);\n\n  if (!overmind.mode) {\n    throwMissingContextError();\n  }\n\n  return overmind.actions;\n};\n\nconst useEffects = () => {\n  const overmind = react.useContext(context);\n\n  if (!overmind.mode) {\n    throwMissingContextError();\n  }\n\n  return overmind.effects;\n};\n\nconst useReaction = () => {\n  const overmind = react.useContext(context);\n\n  if (!overmind.mode) {\n    throwMissingContextError();\n  }\n\n  return overmind.reaction;\n};\n\nexport const createStateHook = () => {\n  return useState;\n};\nexport const createActionsHook = () => {\n  return useActions;\n};\nexport const createEffectsHook = () => {\n  return useEffects;\n};\nexport const createReactionHook = () => {\n  return useReaction;\n};\nexport const createHook = () => {\n  return () => {\n    const state = useState();\n    const actions = useActions();\n    const effects = useEffects();\n    const overmind = react.useContext(context);\n    return {\n      state,\n      actions,\n      effects,\n      reaction: overmind.reaction,\n      addMutationListener: overmind.addMutationListener\n    };\n  };\n};\nexport const createConnect = () => {\n  return component => {\n    let componentInstanceId = 0;\n    const name = component.displayName || component.name || 'Anonymous';\n    const populatedComponent = component;\n    populatedComponent.__componentId = typeof populatedComponent.__componentId === 'undefined' ? nextComponentId++ : populatedComponent.__componentId;\n    const isClassComponent = component.prototype && typeof component.prototype.render === 'function';\n\n    if (isClassComponent) {\n      const originalRender = component.prototype.render;\n\n      component.prototype.render = function () {\n        if (this.props.overmind) {\n          return this.props.overmind.tree.trackScope(() => originalRender.call(this), this.props.overmind.onUpdate);\n        }\n\n        return originalRender.call(this);\n      };\n    }\n\n    if (IS_PRODUCTION) {\n      class HOC extends react.Component {\n        constructor(props, context) {\n          super(props);\n\n          this.onUpdate = () => {\n            this.setState({\n              overmind: {\n                state: this.tree.state,\n                effects: this.overmind.effects,\n                actions: this.overmind.actions,\n                addMutationListener: this.overmind.addMutationListener,\n                onUpdate: this.onUpdate,\n                tree: this.tree,\n                reaction: this.overmind.reaction\n              }\n            });\n          };\n\n          if (!context) {\n            throwMissingContextError();\n          }\n\n          this.overmind = context;\n          this.tree = this.overmind.proxyStateTree.getTrackStateTree();\n          this.state = {\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction\n            }\n          };\n\n          this.wrappedComponent = (...args) => this.tree.trackScope(() => component(...args), this.onUpdate);\n        }\n\n        componentWillUnmount() {\n          this.overmind.proxyStateTree.disposeTree(this.tree);\n        }\n\n        render() {\n          if (isClassComponent) {\n            return react.createElement(component, Object.assign(Object.assign({}, this.props), {\n              overmind: this.state.overmind\n            }));\n          }\n\n          return react.createElement(this.wrappedComponent, Object.assign(Object.assign({}, this.props), {\n            overmind: this.state.overmind\n          }));\n        }\n\n      }\n\n      HOC.contextType = context;\n      return HOC;\n    } else {\n      class HOC extends react.Component {\n        constructor(props, context) {\n          super(props);\n          this.componentInstanceId = componentInstanceId++;\n          this.currentFlushId = 0;\n\n          this.onUpdate = (mutatons, paths, flushId) => {\n            this.currentFlushId = flushId;\n            this.isUpdating = true;\n            this.setState({\n              overmind: {\n                state: this.tree.state,\n                effects: this.overmind.effects,\n                actions: this.overmind.actions,\n                addMutationListener: this.overmind.addMutationListener,\n                onUpdate: this.onUpdate,\n                tree: this.tree,\n                reaction: this.overmind.reaction\n              }\n            });\n          };\n\n          if (!context) {\n            throwMissingContextError();\n          }\n\n          this.overmind = context;\n          this.tree = this.overmind.proxyStateTree.getTrackStateTree();\n          this.state = {\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction\n            }\n          };\n\n          this.wrappedComponent = (...args) => this.tree.trackScope(() => component(...args), this.onUpdate);\n        }\n\n        componentDidMount() {\n          this.overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {\n            componentId: populatedComponent.__componentId,\n            componentInstanceId: this.componentInstanceId,\n            name,\n            paths: Array.from(this.tree.pathDependencies)\n          });\n        }\n\n        componentDidUpdate() {\n          if (this.isUpdating) {\n            this.overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {\n              componentId: populatedComponent.__componentId,\n              componentInstanceId: this.componentInstanceId,\n              name,\n              flushId: this.currentFlushId,\n              paths: Array.from(this.tree.pathDependencies)\n            });\n            this.isUpdating = false;\n          }\n        }\n\n        componentWillUnmount() {\n          this.overmind.proxyStateTree.disposeTree(this.tree);\n          this.overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {\n            componentId: populatedComponent.__componentId,\n            componentInstanceId: this.componentInstanceId,\n            name\n          });\n        }\n\n        render() {\n          if (isClassComponent) {\n            return react.createElement(component, Object.assign(Object.assign({}, this.props), {\n              overmind: this.state.overmind\n            }));\n          }\n\n          return react.createElement(this.wrappedComponent, Object.assign(Object.assign({}, this.props), {\n            overmind: this.state.overmind\n          }));\n        }\n\n      }\n\n      HOC.contextType = context;\n      Object.defineProperties(HOC, {\n        name: {\n          value: 'Connect' + name\n        }\n      });\n      return HOC;\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import 'proxy-state-tree'\nimport { unstable_scheduleCallback, unstable_getCurrentPriorityLevel, unstable_cancelCallback } from 'scheduler'\nimport {\n  EventType,\n  IConfiguration,\n  MODE_SSR,\n  Overmind,\n  OvermindMock,\n} from 'overmind'\nimport { IMutationCallback } from 'proxy-state-tree'\nimport * as react from 'react'\n\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\nconst IS_TEST = process.env.NODE_ENV === 'test'\nconst isNode =\n  !IS_TEST && process && process.title && process.title.includes('node')\n\nexport type IReactComponent<P = any> =\n  | react.StatelessComponent<P>\n  | react.ComponentClass<P>\n  | react.ClassicComponentClass<P>\n\n// Diff / Omit taken from https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-311923766\ntype Omit<T, K extends keyof T> = Pick<\n  T,\n  ({ [P in keyof T]: P } &\n    { [P in K]: never } & { [x: string]: never; [x: number]: never })[keyof T]\n>\n\nfunction getFiberType(component) {\n  if (component.type) {\n    // React.memo\n    return getFiberType(component.type)\n  }\n  // React.forwardRef\n  return component.render || component\n}\n\n// Inspired from https://github.com/facebook/react/blob/master/packages/react-devtools-shared/src/backend/renderer.js\nfunction getDisplayName(component): string {\n  const type = getFiberType(component);\n  return (\n    type.displayName ||\n    type.name ||\n    'Anonymous'\n  );\n}\n\nexport interface IConnect<Config extends IConfiguration> {\n  overmind: {\n    state: Overmind<Config>['state']\n    actions: Overmind<Config>['actions']\n    effects: Overmind<Config>['effects']\n    addMutationListener: Overmind<Config>['addMutationListener']\n    reaction: Overmind<Config>['reaction']\n    suspend: <T>(cb: () => T) => T\n  }\n}\n\nfunction throwMissingContextError() {\n  throw new Error(\n    'The Overmind hook could not find an Overmind instance on the context of React. Please make sure you use the Provider component at the top of your application and expose the Overmind instance there. Please read more in the React guide on the website'\n  )\n}\n\nconst context = react.createContext<Overmind<IConfiguration>>({} as Overmind<\n  IConfiguration\n>)\nlet nextComponentId = 0\n\nexport const Provider: react.ProviderExoticComponent<\n  react.ProviderProps<Overmind<IConfiguration> | OvermindMock<IConfiguration>>\n> = context.Provider\n\nfunction useForceRerender() {\n  const [{ flushId }, setTick] = react.useState({ tick: 0, flushId: 0})\n\n  const forceRerender = react.useCallback((flushId?) => {\n      setTick(current => ({\n        ...current,\n        tick: current.tick + 1,\n        flushId: flushId || current.flushId\n      }))\n  }, [])\n\n  return {\n    flushId, \n    forceRerender\n  }\n}\n\nlet currentComponentInstanceId = 0\nconst {\n  ReactCurrentOwner,\n} = (react as any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\nconst useCurrentComponent = () => {\n  return ReactCurrentOwner &&\n    ReactCurrentOwner.current &&\n    ReactCurrentOwner.current.elementType\n    ? ReactCurrentOwner.current.elementType\n    : {}\n}\n\nconst useState =  <Config extends IConfiguration>(): Overmind<Config>['state'] => {\n  const overmind = react.useContext(context) as Overmind<Config>\n\n  if (!(overmind as any).mode) {\n    throwMissingContextError()\n  }\n\n  if (isNode || (overmind as any).mode.mode === MODE_SSR) {\n    return overmind.state\n  }\n\n  const trackingRef = react.useRef<any>(null)\n\n  const {flushId, forceRerender} = useForceRerender()\n\n  if (!trackingRef.current) {\n    trackingRef.current = {\n      tree: (overmind as any).proxyStateTree.getTrackStateTree(),\n      hasUpdatedBeforeCommit: false,\n      stopTrackingTask: unstable_scheduleCallback(unstable_getCurrentPriorityLevel(), () => {\n        trackingRef.current.tree.stopTracking()\n      })\n    }\n  }\n\n  if (IS_PRODUCTION) {\n    react.useLayoutEffect(() => {\n      trackingRef.current.mounted = true\n      \n\n      if (trackingRef.current.hasUpdatedBeforeCommit) {\n        forceRerender()\n      }\n\n      return () => {\n        ;(overmind as any).proxyStateTree.disposeTree(trackingRef.current.tree)\n      }\n    }, [])\n\n    react.useLayoutEffect(() => {\n      if (trackingRef.current.stopTrackingTask) {\n        unstable_cancelCallback(trackingRef.current.stopTrackingTask)\n        trackingRef.current.stopTrackingTask = null\n      }\n      trackingRef.current.tree.stopTracking()\n    })\n    trackingRef.current.tree.track(() => {\n      if (trackingRef.current.mounted) {\n        forceRerender()\n      } else {\n        trackingRef.current.hasUpdatedBeforeCommit = true\n      }\n    })\n  } else {\n    const component = useCurrentComponent()\n    const name = getDisplayName(component)\n    component.__componentId =\n      typeof component.__componentId === 'undefined'\n        ? nextComponentId++\n        : component.__componentId\n\n    const { current: componentInstanceId } = react.useRef<any>(\n      currentComponentInstanceId++\n    )\n\n    react.useLayoutEffect(() => {\n      trackingRef.current.mounted = true\n      overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {\n        componentId: component.__componentId,\n        componentInstanceId,\n        name,\n        paths: Array.from(trackingRef.current.tree.pathDependencies) as any,\n      })\n\n      if (trackingRef.current.hasUpdatedBeforeCommit) {\n        forceRerender()\n      }\n\n      return () => {\n        ;(overmind as any).proxyStateTree.disposeTree(trackingRef.current.tree)\n        overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {\n          componentId: component.__componentId,\n          componentInstanceId,\n          name,\n        })\n      }\n    }, [])\n\n    react.useLayoutEffect(() => {\n      if (trackingRef.current.stopTrackingTask) {\n        unstable_cancelCallback(trackingRef.current.stopTrackingTask)\n        trackingRef.current.stopTrackingTask = null\n      }\n      trackingRef.current.tree.stopTracking()\n      overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {\n        componentId: component.__componentId,\n        componentInstanceId,\n        name,\n        flushId,\n        paths: Array.from(trackingRef.current.tree.pathDependencies) as any,\n      })\n    })\n    trackingRef.current.tree.track(() => {\n      if (trackingRef.current.mounted) {\n        forceRerender()\n      } else {\n        trackingRef.current.hasUpdatedBeforeCommit = true\n      }\n    })\n  }\n  \n\n  return trackingRef.current.tree.state\n}\n\nconst useActions =  <Config extends IConfiguration>(): Overmind<Config>['actions'] => {\n  const overmind = react.useContext(context) as Overmind<Config>\n\n  if (!(overmind as any).mode) {\n    throwMissingContextError()\n  }\n  \n  return overmind.actions\n}\n\nconst useEffects =  <Config extends IConfiguration>(): Overmind<Config>['effects'] => {\n  const overmind = react.useContext(context) as Overmind<Config>\n\n  if (!(overmind as any).mode) {\n    throwMissingContextError()\n  }\n  \n  return overmind.effects\n}\n\nconst useReaction =  <Config extends IConfiguration>(): Overmind<Config>['reaction'] => {\n  const overmind = react.useContext(context) as Overmind<Config>\n\n  if (!(overmind as any).mode) {\n    throwMissingContextError()\n  }\n  \n  return overmind.reaction\n}\n\nexport const createStateHook: <Config extends IConfiguration>() => () => Overmind<Config>['state'] = () => {\n  return useState as any\n}\n\nexport const createActionsHook: <Config extends IConfiguration>() => () => Overmind<Config>['actions'] = ()=> {\n  return useActions as any\n}\n\nexport const createEffectsHook: <Config extends IConfiguration>() => () => Overmind<Config>['effects'] = () => {\n  return useEffects as any\n}\n\nexport const createReactionHook: <Config extends IConfiguration>() => () => Overmind<Config>['reaction'] = () => {\n  return useReaction as any\n}\n\nexport const createHook: <Config extends IConfiguration>() => () => {\n  state: Overmind<Config>['state']\n  actions: Overmind<Config>['actions']\n  effects: Overmind<Config>['effects']\n  addMutationListener: (cb: IMutationCallback) => () => void\n  reaction: Overmind<Config>['reaction']\n} = () => {\n  return () => {\n    const state = useState()\n    const actions = useActions()\n    const effects = useEffects()\n    const overmind = react.useContext(context)\n\n    return {\n      state,\n      actions,\n      effects,\n      reaction: overmind.reaction,\n      addMutationListener: overmind.addMutationListener\n    } as any\n  }\n}\n\nexport const createConnect: <ThisConfig extends IConfiguration>() => <Props>(component: IReactComponent<\n  Props & {\n    overmind: {\n      state: Overmind<ThisConfig>['state']\n      actions: Overmind<ThisConfig>['actions']\n      reaction: Overmind<ThisConfig>['reaction']\n    }\n  }\n>) => IReactComponent<\n  Omit<\n    Props & IConnect<Overmind<ThisConfig>>,\n    keyof IConnect<Overmind<ThisConfig>>\n  >\n>  = () => {\n  return (\n    component\n  )=> {\n    let componentInstanceId = 0\n    const name = component.displayName || component.name || 'Anonymous';\n    const populatedComponent = component as any\n    populatedComponent.__componentId =\n      typeof populatedComponent.__componentId === 'undefined'\n        ? nextComponentId++\n        : populatedComponent.__componentId\n    const isClassComponent =\n      component.prototype && typeof component.prototype.render === 'function'\n\n    if (isClassComponent) {\n      const originalRender = component.prototype.render\n      component.prototype.render = function() {\n        if (this.props.overmind) {\n          return this.props.overmind.tree.trackScope(\n            () => originalRender.call(this),\n            this.props.overmind.onUpdate\n          )\n        }\n\n        return originalRender.call(this)\n      }\n    }\n\n    if (IS_PRODUCTION) {\n      class HOC extends react.Component {\n        tree: any\n        overmind: any\n        state: {\n          overmind: any\n        }\n        wrappedComponent: any\n        static contextType = context\n        constructor(props, context) {\n          super(props)\n\n          if (!context) {\n            throwMissingContextError()\n          }\n          this.overmind = context\n          this.tree = this.overmind.proxyStateTree.getTrackStateTree()\n          this.state = {\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction,\n            },\n          }\n          this.wrappedComponent = (...args) =>\n            this.tree.trackScope(\n              () => (component as any)(...args),\n              this.onUpdate\n            )\n        }\n        componentWillUnmount() {\n          this.overmind.proxyStateTree.disposeTree(this.tree)\n        }\n        onUpdate = () => {\n          this.setState({\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction,\n            },\n          })\n        }\n        render() {\n          if (isClassComponent) {\n            return react.createElement(component, {\n              ...this.props,\n              overmind: this.state.overmind,\n            } as any)\n          }\n\n          return react.createElement(this.wrappedComponent, {\n            ...this.props,\n            overmind: this.state.overmind,\n          } as any)\n        }\n      }\n\n      return HOC as any\n    } else {\n      class HOC extends react.Component {\n        tree: any\n        overmind: any\n        componentInstanceId = componentInstanceId++\n        currentFlushId = 0\n        state: {\n          overmind: any\n        }\n        isUpdating: boolean\n        wrappedComponent: any\n        static contextType = context\n        constructor(props, context) {\n          super(props)\n\n          if (!context) {\n            throwMissingContextError()\n          }\n\n          this.overmind = context\n          this.tree = this.overmind.proxyStateTree.getTrackStateTree()\n          this.state = {\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction,\n            },\n          }\n          this.wrappedComponent = (...args) =>\n            this.tree.trackScope(\n              () => (component as any)(...args),\n              this.onUpdate\n            )\n        }\n        componentDidMount() {\n          this.overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {\n            componentId: populatedComponent.__componentId,\n            componentInstanceId: this.componentInstanceId,\n            name,\n            paths: Array.from(this.tree.pathDependencies) as any,\n          })\n        }\n        componentDidUpdate() {\n          if (this.isUpdating) {\n            this.overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {\n              componentId: populatedComponent.__componentId,\n              componentInstanceId: this.componentInstanceId,\n              name,\n              flushId: this.currentFlushId,\n              paths: Array.from(this.tree.pathDependencies as Set<string>),\n            })\n            this.isUpdating = false\n          }\n        }\n        componentWillUnmount() {\n          this.overmind.proxyStateTree.disposeTree(this.tree)\n          this.overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {\n            componentId: populatedComponent.__componentId,\n            componentInstanceId: this.componentInstanceId,\n            name,\n          })\n        }\n        onUpdate = (mutatons, paths, flushId) => {\n          this.currentFlushId = flushId\n          this.isUpdating = true\n          this.setState({\n            overmind: {\n              state: this.tree.state,\n              effects: this.overmind.effects,\n              actions: this.overmind.actions,\n              addMutationListener: this.overmind.addMutationListener,\n              onUpdate: this.onUpdate,\n              tree: this.tree,\n              reaction: this.overmind.reaction,\n            },\n          })\n        }\n        render() {\n          if (isClassComponent) {\n            return react.createElement(component, {\n              ...this.props,\n              overmind: this.state.overmind,\n            } as any)\n          }\n          return react.createElement(this.wrappedComponent, {\n            ...this.props,\n            overmind: this.state.overmind,\n          } as any)\n        }\n      }\n\n      Object.defineProperties(HOC, {\n        name: {\n          value: 'Connect' + name,\n        },\n      })\n\n      return HOC as any\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}